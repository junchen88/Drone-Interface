# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QWidget, QApplication, QLabel, QVBoxLayout
from PyQt5.QtGui import QPixmap, QImage
import sys
import cv2
from PyQt5.QtCore import pyqtSignal, pyqtSlot, Qt, QThread

import webCamQThreadClass

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1211, 630)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.stackedWidget = QtWidgets.QStackedWidget(self.centralwidget)
        self.stackedWidget.setGeometry(QtCore.QRect(0, 0, 1001, 581))
        self.stackedWidget.setObjectName("stackedWidget")
        self.page = QtWidgets.QWidget()
        self.page.setObjectName("page")
        self.flightmodeKey = QtWidgets.QLineEdit(self.page)
        self.flightmodeKey.setGeometry(QtCore.QRect(800, 320, 31, 31))
        self.flightmodeKey.setText("")
        self.flightmodeKey.setMaxLength(1)
        self.flightmodeKey.setObjectName("flightmodeKey")
        self.armLabel = QtWidgets.QLabel(self.page)
        self.armLabel.setGeometry(QtCore.QRect(750, 280, 31, 21))
        self.armLabel.setObjectName("armLabel")
        self.beeperKey = QtWidgets.QLineEdit(self.page)
        self.beeperKey.setGeometry(QtCore.QRect(800, 370, 31, 31))
        self.beeperKey.setText("")
        self.beeperKey.setMaxLength(1)
        self.beeperKey.setObjectName("beeperKey")
        self.beeperLabel = QtWidgets.QLabel(self.page)
        self.beeperLabel.setGeometry(QtCore.QRect(740, 380, 51, 21))
        self.beeperLabel.setObjectName("beeperLabel")
        self.armLabel_2 = QtWidgets.QLabel(self.page)
        self.armLabel_2.setGeometry(QtCore.QRect(650, 330, 41, 21))
        self.armLabel_2.setObjectName("armLabel_2")
        self.lineEdit_3 = QtWidgets.QLineEdit(self.page)
        self.lineEdit_3.setGeometry(QtCore.QRect(850, 320, 31, 31))
        self.lineEdit_3.setText("")
        self.lineEdit_3.setMaxLength(1)
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.lineEdit_7 = QtWidgets.QLineEdit(self.page)
        self.lineEdit_7.setGeometry(QtCore.QRect(800, 470, 31, 31))
        self.lineEdit_7.setText("")
        self.lineEdit_7.setMaxLength(1)
        self.lineEdit_7.setObjectName("lineEdit_7")
        self.modesLabel = QtWidgets.QLabel(self.page)
        self.modesLabel.setGeometry(QtCore.QRect(750, 150, 121, 21))
        self.modesLabel.setObjectName("modesLabel")
        self.armKey = QtWidgets.QLineEdit(self.page)
        self.armKey.setGeometry(QtCore.QRect(800, 270, 31, 31))
        self.armKey.setText("")
        self.armKey.setMaxLength(1)
        self.armKey.setObjectName("armKey")
        self.prearmKey = QtWidgets.QLineEdit(self.page)
        self.prearmKey.setGeometry(QtCore.QRect(800, 220, 31, 31))
        self.prearmKey.setText("")
        self.prearmKey.setMaxLength(1)
        self.prearmKey.setObjectName("prearmKey")
        self.armLabel_3 = QtWidgets.QLabel(self.page)
        self.armLabel_3.setGeometry(QtCore.QRect(700, 330, 51, 21))
        self.armLabel_3.setObjectName("armLabel_3")
        self.armLabel_4 = QtWidgets.QLabel(self.page)
        self.armLabel_4.setGeometry(QtCore.QRect(760, 330, 31, 21))
        self.armLabel_4.setObjectName("armLabel_4")
        self.OSDKey = QtWidgets.QLineEdit(self.page)
        self.OSDKey.setGeometry(QtCore.QRect(800, 420, 31, 31))
        self.OSDKey.setText("")
        self.OSDKey.setMaxLength(1)
        self.OSDKey.setObjectName("OSDKey")
        self.displayFrame = QtWidgets.QLabel(self.page)
        self.displayFrame.setGeometry(QtCore.QRect(100, 50, 451, 451))
        self.displayFrame.setText("")
        self.displayFrame.setObjectName("displayFrame")


        self.Stop = QtWidgets.QPushButton(self.page)
        self.Stop.setGeometry(QtCore.QRect(200, 520, 80, 23))
        self.Stop.setObjectName("Stop")
        self.Start = QtWidgets.QPushButton(self.page)
        self.Start.setGeometry(QtCore.QRect(360, 520, 80, 23))
        self.Start.setObjectName("Start")

        self.Start.clicked.connect(self.start)
        self.Stop.clicked.connect(self.stop)


        self.prearmLabel = QtWidgets.QLabel(self.page)
        self.prearmLabel.setGeometry(QtCore.QRect(740, 230, 51, 21))
        self.prearmLabel.setObjectName("prearmLabel")
        self.OSDDisableLabel = QtWidgets.QLabel(self.page)
        self.OSDDisableLabel.setGeometry(QtCore.QRect(680, 430, 111, 21))
        self.OSDDisableLabel.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.OSDDisableLabel.setObjectName("OSDDisableLabel")
        self.stackedWidget.addWidget(self.page)
        self.page_2 = QtWidgets.QWidget()
        self.page_2.setObjectName("page_2")
        self.stackedWidget.addWidget(self.page_2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1211, 20))
        self.menubar.setObjectName("menubar")
        self.menu_File = QtWidgets.QMenu(self.menubar)
        self.menu_File.setObjectName("menu_File")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtWidgets.QToolBar(MainWindow)
        self.toolBar.setObjectName("toolBar")
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.menubar.addAction(self.menu_File.menuAction())

        self.retranslateUi(MainWindow)
        self.stackedWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # create the video capture thread
        self.thread = webCamQThreadClass.videoStreamThread()
        # connect its signal to the update_image slot
        self.thread.change_pixmap_signal.connect(self.update_image)
        # start the thread
        self.thread.start()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.armLabel.setText(_translate("MainWindow", "Arm"))
        self.beeperLabel.setText(_translate("MainWindow", "Beeper"))
        self.armLabel_2.setText(_translate("MainWindow", "Angle"))
        self.modesLabel.setText(_translate("MainWindow", "Modes/Features"))
        self.armLabel_3.setText(_translate("MainWindow", "Horizon"))
        self.armLabel_4.setText(_translate("MainWindow", "Acro"))
        self.Stop.setText(_translate("MainWindow", "Stop"))
        self.Start.setText(_translate("MainWindow", "Start"))
        self.prearmLabel.setText(_translate("MainWindow", "Prearm"))
        self.OSDDisableLabel.setText(_translate("MainWindow", "OSD Disable SW"))
        self.menu_File.setTitle(_translate("MainWindow", "&File"))
        self.toolBar.setWindowTitle(_translate("MainWindow", "toolBar"))


    def update_image(self, frame):
        """Updates the image_label with a new opencv image"""
        qt_img = self.convert_cv_qt_show(frame)
        #self.displayFrame.setPixmap(qt_img)
    
    def convert_cv_qt_show(self, frame):
        """Convert from an opencv image to QPixmap"""
        
        rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        

        height, width, depth = rgb_image.shape
        if depth != 3:
            raise ValueError("Ui_ControlGui: Expected frame in RGB888 format")

        # Construct the showable pixel data
        bytesPerRow = 3 * width
        
        qtImg = QImage(rgb_image.data, width, height, bytesPerRow, QImage.Format_RGB888)
        qtPix = QPixmap(qtImg)

        # Scale the image to fit the pane then display
        targetWidth = self.displayFrame.width()
        targetHeight = self.displayFrame.height()
        self.displayFrame.setPixmap(
            qtPix.scaled(targetWidth, targetHeight, Qt.KeepAspectRatio)
        )

    
    def stop(self):
        if self.thread.isRunning:
            self.thread.stop()

        else:
            print("no camera is running")

    def start(self):
        if not self.thread.isRunning:
            # create the video capture thread
            self.thread = webCamQThreadClass.videoStreamThread()
            # connect its signal to the update_image slot
            self.thread.change_pixmap_signal.connect(self.update_image)
            # start the thread
            self.thread.start()

        else:
            print("camera is already running")


if __name__ == "__main__":
   app = QtWidgets.QApplication(sys.argv)
   Dialog = QtWidgets.QMainWindow()
   ui = Ui_MainWindow()
   ui.setupUi(Dialog)
   Dialog.show()
   sys.exit(app.exec_())